//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//bough procotol link layer of half
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#ifndef mde_bough_link_half_H
#define mde_bough_link_half_H
//------------------------------------------------------------------------------
#ifndef snail_data_types
    #include ".\depend\snail_data_types.h"
#endif
//------------------------------------------------------------------------------
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//定义发送回环检测是否开启，如果硬件没有回环功能，注释掉 TX_FEEDBACK_EN
//------------------------------------------------------------------------------
#define  TX_FEEDBACK_EN
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//定义最大传输数据
//------------------------------------------------------------------------------
#define  MAX_PAYLOAD_LEN     200+6
#define  PREABBLE_LEN        2
#define  MAX_REV_BUFFER      (MAX_PAYLOAD_LEN+18)
#define  MAX_TRN_BUFFER      (MAX_PAYLOAD_LEN+PREABBLE_LEN+2+18)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//通讯数据缓存
//------------------------------------------------------------------------------
typedef struct
{
    sdt_int16u ProcotolType;    //协议类型
    sdt_int16u PayloadLength;   //数据长度  
    union
    {
        struct
        {
            sdt_int8u  LinkDstAddr[6];  //目标地址
            sdt_int8u  LinkSrcAddr[6];  //源地址
            sdt_int8u  Payload[MAX_PAYLOAD_LEN];    //数据
        };
        sdt_int8u raw_payload[MAX_PAYLOAD_LEN+12];
    };
}bgk_comm_buff_def;
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//bough 数据链路任务,负责链路的忙碌指示,数据的收发
//------------------------------------------------------------------------------
void mde_bough_link_task(void);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name:获取链路忙碌状态
//链路忙碌时，对链路进行写入操作，会发生位置的错误
//in:  in_solid_number -- 实例编号
//out: sdt_true  -- link is busy. 
//     sdt_false -- link is idle.
//------------------------------------------------------------------------------
sdt_bool pull_bough_link_is_busy(sdt_int8u in_solid_number);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name:获取接收报文信息
//in:   in_solid_number -- 实例编号
//out:  sdt_true  -- 接收到一个完整的报文
//      sdt_false -- 没有接收到完整的报文
//------------------------------------------------------------------------------
sdt_bool pull_bough_recevie_one_message(sdt_int8u in_solid_number);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name:获取链路缓冲区指针
//in:   in_solid_number -- 实例编号
//out:  缓冲区指针
//------------------------------------------------------------------------------
bgk_comm_buff_def* pull_bough_message_pBuff(sdt_int8u in_solid_number);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name:推入一字节的接收数据到链路
//in:   in_solid_number -- 实例编号
//      in_rx_byte      -- 接收的数据
//out:  none
//------------------------------------------------------------------------------
void push_bough_one_receive_byte(sdt_int8u in_solid_number,sdt_int8u in_rx_byte);

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//name:激活发送一个报文数据,先填充缓冲区数据，再激活发送
//in:   in_solid_number -- 实例编号
//      conflict_check  --sdt_true 发送处于冲突检测模式(RS485上拉发送)
//      
//out:  none
//------------------------------------------------------------------------------
void push_active_one_message_transmit(sdt_int8u in_solid_number,sdt_bool conflict_check);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef enum
{
    bgk_trans_mon_none      = 0x00,
    bgk_trans_mon_doing     = 0x01,
    bgk_trans_mon_conflict  = 0x02,
    bgk_trans_mon_complete  = 0x03,
    bgk_trans_mon_error     = 0x04,
}bgk_trans_mon_def;
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//name:数据发送状态监控
//in:  in_solid_number -- 实例编号
//out: bgk_trans_mon_none     -- 无意义
//     bgk_trans_mon_doing    -- 发送进行中
//     bgk_trans_mon_conflict -- PHY有冲突报文
//     bgk_trans_mon_complete -- 发送完成
//     bgk_trans_mon_error    -- 未知错误
//------------------------------------------------------------------------------
bgk_trans_mon_def pull_bough_transmit_monitor(sdt_int8u in_solid_number);
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++++++++++++++++++++++++++++end+++++++++++++++++++++++++++++++++++++++++
#endif
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
