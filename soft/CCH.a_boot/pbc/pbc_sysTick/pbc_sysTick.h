#ifndef pbc_sysTick_H
#define pbc_sysTick_H
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#ifndef snail_data_types
    #include ".\depend\snail_data_types.h"
#endif
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#define timStatusBits_typeMask          0x07

#define timStatusBits_typeMillsecond    0x01
#define timStatusBits_typeSecond        0x02
#define timStatusBits_typeMinute        0x04

#define timStatusBits_onceTriggered     0x80
//-------------------------------------------------------------------------------------------------
#define timerType_millisecond       timStatusBits_typeMillsecond
#define timerType_second            timStatusBits_typeSecond
#define timerType_minute            timStatusBits_typeMinute
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef struct
{
    sdt_int8u  timStatusBits;
    sdt_int16u timClock;
    sdt_int16u keepTick;
}timerClock_def;
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
#define macro_createTimer(timerName,timerType,org_value)  static timerClock_def timerName={timerType,org_value,0};
//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#define err_createTaskFail  0xff
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef void(*pTaskFun_def)(void);
//-------------------------------------------------------------------------------------------------
typedef struct
{
    sdt_bool       taskRun;         //运行标志
    sdt_int16u     timer;           //任务时间计数
    sdt_int16u     timerPeriod;     //任务周期
    pTaskFun_def   taskHook;          //任务函数指针
}taskSCH_def;
//-------------------------------------------------------------------------------------------------
#define taskTotal      8      
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
sdt_int16u pbc_getSysTickMillisecond(void);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 系统节拍处理
//功能: 处理系统时钟节拍，调度任务
//入口: 无
//
//出口: 无
//-------------------------------------------------------------------------------------------------
void pbc_sysTickTaskProcess(void);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void pbc_timerClockRun_task(timerClock_def* in_timer);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
void pbc_timerMillRun_task(timerClock_def* in_timer);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 获取定时器是否完成
//功能: 是否完成定时
//入口: 
//      in_timer  ---定时器指针
//
//出口: 是否完成定时, sdt_true--完成定时
//-------------------------------------------------------------------------------------------------
sdt_bool pbc_pull_timerIsCompleted(timerClock_def* in_timer);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 获取定时器是否完成一次触发
//功能: 是否完成一次定时
//入口: 
//      in_trigger_timer    ---触发型定时器指针
//
//出口: 是否完成定时, sdt_true--完成定时
//-------------------------------------------------------------------------------------------------
sdt_bool pbc_pull_timerIsOnceTriggered(timerClock_def* in_timer);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 停止触发检测
//功能: 触发一次的检测失效
//入口: 
//      in_trigger_timer    ---触发型定时器指针
//
//出口: 是否完成定时, sdt_true--完成定时
//-------------------------------------------------------------------------------------------------
void pbc_stop_timerIsOnceTriggered(timerClock_def* in_timer);
//名称: 加载定时器定时时间
//功能: 定时器计时运行
//入口: 
//      in_timer  ---定时器指针
//      in_value  ---定时时间
//
//出口: 
//-------------------------------------------------------------------------------------------------
void pbc_reload_timerClock(timerClock_def* in_timer,sdt_int16u in_value);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 创建运行函数任务
//功能: 
//入口: in_taskPointer   ---任务指针
//      sch_period      ---调度周期ms
//
//出口: 任务序号, 0 --(taskTotal-1), err_createTaskFail  -- 创建任务失败
//-------------------------------------------------------------------------------------------------
sdt_int8u pbc_createTask_one(pTaskFun_def in_taskPointer,sdt_int16u sch_period);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//名称: 立即运行一个任务
//功能: 
//入口: in_taskPointer   ---任务指针
//
//出口:
//-------------------------------------------------------------------------------------------------
void pbc_taskImmediatelyRun(pTaskFun_def in_taskPointer);
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#endif